using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using LSLIBWebBased;
using System.Data;

public partial class View_Form_USBDriveLoan : System.Web.UI.Page
{
    protected ClassHashTableHelper ClsHashTableHelper;
    protected ClassFileUploadHelper ClsFileUploadHelper = new ClassFileUploadHelper();

    protected string strEmailIP = System.Configuration.ConfigurationManager.AppSettings["EmailIP"];

    private string msMode
    {
        get
        {
            if (LSLIBWebBased.nsSQL.mSQL.oHandleNullAndNothing(this.Request.QueryString["Mode"]) == "")
            {
                return "";
            }
            else
            {
                return this.Request.QueryString["Mode"];
            }
        }
    }

    private string msModeIT
    {
        get
        {
            if (LSLIBWebBased.nsSQL.mSQL.oHandleNullAndNothing(this.Request.QueryString["ModeIT"]) == "")
            {
                return "";
            }
            else
            {
                return this.Request.QueryString["ModeIT"];
            }
        }
    }

    private string msModeV
    {
        get
        {
            if (LSLIBWebBased.nsSQL.mSQL.oHandleNullAndNothing(this.Request.QueryString["ModeV"]) == "")
            {
                return "";
            }
            else
            {
                return this.Request.QueryString["ModeV"];
            }
        }
    }

    protected void Page_Init(object sender, EventArgs e)
    {
        //檢查登入權限+取得翻譯表
        LSLIBWebBased.nsClass.mClass.cPageLoadHelper_GuocoWeb(this, ref ClsHashTableHelper, true, "", "", true);
        this.Title = ClsHashTableHelper.sGetHash(ClsHashTableHelper.mClassMyConfiguration.msSystemCode);
        this.ucPageHeader1.msTitle = this.Title;

       // LSLIBWebBased.nsClass.mClass.cFileUploadHelper(this, ClsFileUploadHelper, FileUpload1);
                
       // CheckMode();
        //LSLIBWebBased.nsClass.mClass.cGridViewAddSortMethod(this.GridView1, FillGridView1, this.lblSortLabel1, null, ClassGridViewHelper.enGridViewTypeCollection.DetailReportWithAutoGeneratedColumnWithNoHeader);

    }

    protected void Page_Load(object sender, EventArgs e)
    {
        // 為頁面添加不能為空的檢查, 如有ValidationGroup, 就添加檢查功能.
        //this.ClsHashTableHelper.fAddValidator(this);

        if (!IsPostBack)
        {
            txtReasonRequest_edit.Attributes.Add("MaxLength", txtReasonRequest_edit.MaxLength.ToString());
            txtCopyDataDetail_edit.Attributes.Add("MaxLength", txtCopyDataDetail_edit.MaxLength.ToString());

            //LIBLocal2.BindDDLSystemFolder_WithAllChildren(ddlFolderCode_edit, this.ClsHashTableHelper.mClassMyConfiguration.msSystemCode);

            //LSLIBWebBased.nsDataSet.mDataSet.BindListControl("stp_wf_all_DDLParentFolderPath_all", ddlFolderCode_edit, LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

            //LSLIBWebBased.nsDataSet.mDataSet.BindListControl("stp_wf_all_DDLStatus", ddlInfoStatus_edit, LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

            LIBLocal.BindDDLUserList(ddlRequester_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, "Form_USB_Requester", "", "");
            ddlRequester_edit.Items.Insert(0, "");

            LIBLocal.BindDDLUserList(ddlLoanToUser_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, "Form_USB_IT_LoanToUser", "", "");
            ddlLoanToUser_edit.Items.Insert(0, "");

            LIBLocal.BindDDLUserList(ddlITStaffHandleLoan_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, "Form_USB_IT_StaffHandleLoan", "", "");
            ddlITStaffHandleLoan_edit.Items.Insert(0, "");

            LIBLocal.BindDDLUserList(ddlITStaffHandleReturn_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, "Form_USB_IT_StaffHandleReturn", "", "");
            ddlITStaffHandleReturn_edit.Items.Insert(0, "");

            LIBLocal.BindDDLUserList(ddlFirstApprover_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, "Form_USB_IT_StaffHandleLoan", "", "");
            ddlFirstApprover_edit.Items.Insert(0, "");
            
            LSLIBWebBased.nsDataSet.mDataSet.BindListControl("stp_wf_all_DDLCompanyCode", ddlCompany_edit, LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

            //BindDDLUserList(ddlProjectManager_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);
          
           // LSLIBWebBased.nsCommon.mCommon.BindDDLMaster(this.ddlStatus_edit, "4", LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

           // LIBLocal2.BindDDLSystemFolder_WithAllChildren(ddlFolderCode_edit, this.ClsHashTableHelper.mClassMyConfiguration.msSystemCode);

            LoadForm();

            //LSLIBWebBased.nsScript.mScript.RefreshParentPage(this, false);
            
        }
    }

    protected void CheckMode()
    {
        string sFlag;

        sFlag = "N";

        btnUpdate_Info.Visible = false;
        btnSendApproval.Visible = false;
        btnEdit_Info.Visible = false;
        btnITSave.Visible = false;
        btnITEdit.Visible = false;
        btnITVeriSave.Visible = false;
        btnITVeriEdit.Visible = false;
        btnApproverAccept.Visible = false;
        btnApproverDeny.Visible = false;
       // btnApprove.Visible = false;
        
       if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                                  , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                                  , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                                  , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                                  , "Form_Update") == true)
        {
            sFlag = "Y";

            if (msMode == "Edit")
            {
                LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPostdetail.Controls, LIBLocal.fSetCoontrolEditMode);
                
                btnUpdate_Info.Visible = true;
                btnSendApproval.Visible = true;
                
              //  div_EditRelatedStaff.Visible = true;
            }           
            else
            {
                btnEdit_Info.Visible = true;

                LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPostdetail.Controls, LIBLocal.fSetCoontrolViewMode);
                    
                //LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(GridViewRS);
              //  div_EditRelatedStaff.Visible = false;

            }                      
        }
       else
       {
           LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPostdetail.Controls, LIBLocal.fSetCoontrolViewMode);
           div_EditRelatedStaff.Visible = false;
       }

       if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                             , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                             , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                             , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                             , "Form_IT") == true)
       {
           sFlag = "Y";

           if (msModeIT == "Edit")
           {
               LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.div_ITUse.Controls, LIBLocal.fSetCoontrolEditMode);

               btnITSave.Visible = true;
           }
           else
           {
               LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.div_ITUse.Controls, LIBLocal.fSetCoontrolViewMode);

               btnITEdit.Visible = true;
           }

           if (msModeV == "Edit")
           {
               LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.div_ITVeri.Controls, LIBLocal.fSetCoontrolEditMode);

               btnITVeriSave.Visible = true;
           }
           else
           {
               LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.div_ITVeri.Controls, LIBLocal.fSetCoontrolViewMode);

               btnITVeriEdit.Visible = true;
           }
       }
       else //if (sFlag == "Y")
       {
           LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.div_ITUse.Controls, LIBLocal.fSetCoontrolViewMode);
           LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.div_ITVeri.Controls, LIBLocal.fSetCoontrolViewMode);
       }


       if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                            , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                            , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                            , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                            , "Form_Approver") == true)
       {
           div_EditRelatedStaff.Visible = true;
           btnApproverAccept.Visible = true;
           btnApproverDeny.Visible = true;
       }
       else
       {
           div_EditRelatedStaff.Visible = false;
       }

        //if (sFlag == "N")
        //{
        //    if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
        //                        , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
        //                        , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
        //                        , ClsHashTableHelper.mClassMyConfiguration.msPostCode
        //                        , "Administrator") == true)
        //    {
        //       // btnApprove.Visible = true;
        //    }

        //    LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPostdetail.Controls, LIBLocal.fSetCoontrolViewMode);
                 
        //  //  LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(GridViewRS);
        //    div_EditRelatedStaff.Visible = false;

        //}
       
    }

    protected void btnEdit_Info_Click(object sender, EventArgs e)
    {
        string lsRedirectURL = "";

        if (lsRedirectURL.Contains("&Mode=Edit") == false)
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString() + "&Mode=Edit";
        }
        else
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString();
        }

        Response.Redirect(lsRedirectURL);
    }

    protected void btnITEdit_Click(object sender, EventArgs e)
    {
        string lsRedirectURL = "";

        if (lsRedirectURL.Contains("&ModeIT=Edit") == false)
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString() + "&ModeIT=Edit";
        }
        else
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString();
        }

        Response.Redirect(lsRedirectURL);
    }

    protected void btnITVeriEdit_Click(object sender, EventArgs e)
    {
        string lsRedirectURL = "";

        if (lsRedirectURL.Contains("&ModeV=Edit") == false)
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString() + "&ModeV=Edit";
        }
        else
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString();
        }

        Response.Redirect(lsRedirectURL);
    }


    protected void LoadForm()
    {

        if (ClsHashTableHelper.mClassMyConfiguration.msPostCode != "")
        {
            ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();
            this.lblFormID.Text = ClsHashTableHelper.mClassMyConfiguration.msPostCode;

            ClsLoadFieldHelper.fAddSqlParameter("FormCode", ClsHashTableHelper.mClassMyConfiguration.msPostCode);
            ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_USBDriveLoan_Load");
                        
            if (ClsLoadFieldHelper.mbDataSetHasRecord)
            {
                ClsLoadFieldHelper.LoadSqlField("System", ref lblSystem);
                ClsLoadFieldHelper.LoadSqlField("FormCode", ref lblFormID);
                ClsLoadFieldHelper.LoadSqlField("FolderCode", ref lblFolderCode);

                ClsLoadFieldHelper.LoadSqlField("DivisionCode", ref lblDivision_view);
                ClsLoadFieldHelper.LoadSqlField("CompanyCode", ref lblCompany_view);
                ClsLoadFieldHelper.LoadSqlField("RequesterCode", ref lblRequester_view);
                ClsLoadFieldHelper.LoadSqlField("TelephoneExt", ref lblTelephoneExt_view);
                ClsLoadFieldHelper.LoadSqlField("ReasonRequest", ref lblReasonRequest_view);

                ClsLoadFieldHelper.LoadSqlField("LoanStartDateTime", ref lblDPLoanStartDate_view);
                ClsLoadFieldHelper.LoadSqlField("LoanReturnDateTime", ref lblDPLoanReturnDate_view);
                ClsLoadFieldHelper.LoadSqlField("CopyDataDetail", ref lblCopyDataDetail_view);
                ClsLoadFieldHelper.LoadSqlField("FirstApprover", ref lblFirstApprover_view);
                
                ClsLoadFieldHelper.LoadSqlField("Status", ref lblStatus);

                ClsLoadFieldHelper.LoadSqlField("URL", ref lblURL);

                //IT use
                ClsLoadFieldHelper.LoadSqlField("ITUse_ActualLoanDateTime", ref lblActualUSBLoanDate_view);
                ClsLoadFieldHelper.LoadSqlField("ITUse_ActualReturnDateTime", ref lblActualUSBReturnDate_view);
                ClsLoadFieldHelper.LoadSqlField("ITUse_Loan", ref lblLoan_view);
                ClsLoadFieldHelper.LoadSqlField("ITUse_LoanUserCode", ref lblLoanToUser_view);
                ClsLoadFieldHelper.LoadSqlField("ITUse_ITStaffHandleLoan", ref lblITStaffHandleLoan_view);
                ClsLoadFieldHelper.LoadSqlField("ITUse_ITStaffHandleReturn", ref lblITStaffHandleReturn_view);

                //IT Verification
                ClsLoadFieldHelper.LoadSqlField("ITVerify_Remarks", ref lblITVeriRemarks_view);
                ClsLoadFieldHelper.LoadSqlField("ITVerify_Verification", ref lblITVerification_view);
                ClsLoadFieldHelper.LoadSqlField("IT_RequestDateTime", ref lbl_ITRequestDate);
             
               // ddlFolderCode_edit.Text = lblFolderCode_view.Text;
                ddlRequester_edit.Text = lblRequester_view.Text;
                txtTelephoneExt_edit.Text = lblTelephoneExt_view.Text;
                txtReasonRequest_edit.Text = lblReasonRequest_view.Text;

                DPLoanStartDate_edit.Text = lblDPLoanStartDate_view.Text;
                DPLoanReturnDate_edit.Text = lblDPLoanReturnDate_view.Text;
                
                ddlCompany_edit.Text =lblCompany_view.Text;
                Bind_ddlDivisionCode(this.ddlCompany_edit.Text, ddlDivision_edit);
                ddlDivision_edit.Text =lblDivision_view.Text;

                txtCopyDataDetail_edit.Text = lblCopyDataDetail_view.Text;
                ddlFirstApprover_edit.Text = lblFirstApprover_view.Text;

                //IT use
                DPActualUSBLoanDate_edit.Text = lblActualUSBLoanDate_view.Text;
                DPActualUSBReturnDate_edit.Text = lblActualUSBReturnDate_view.Text;
                ddlLoanToUser_edit.Text = lblLoanToUser_view.Text;
                ddlITStaffHandleLoan_edit.Text = lblITStaffHandleLoan_view.Text;
                ddlITStaffHandleReturn_edit.Text = lblITStaffHandleReturn_view.Text;
                txtLoan_edit.Text = lblLoan_view.Text;

                //IT Verification
                txtITVeriRemarks_edit.Text = lblITVeriRemarks_view.Text;
                txtITVerification_edit.Text = lblITVerification_view.Text;
            }

            FillGridApproverList(GridViewRS);
           // FillGridAttachment(ClsHashTableHelper.mClassMyConfiguration.msPostCode);
        }
        else
        {
            if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                              , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                              , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                              , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                              , "Create") == true)
            {
                CreateForm();
            }
        }

        CheckMode();       

    }


    protected void CreateForm()
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("SystemCode", ClsHashTableHelper.mClassMyConfiguration.msSystemCode);
        ClsLoadFieldHelper.fAddSqlParameter("FolderCode", ClsHashTableHelper.mClassMyConfiguration.msFolderCode);
        ClsLoadFieldHelper.fAddSqlParameter("UpdateBy", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_USBDriveLoan_CreateNew");

        ClsLoadFieldHelper.LoadSqlField("NewCode", ref lblFormID);
        ClsLoadFieldHelper.LoadSqlField("error", ref lblerror);

        if (lblerror.Text != "")
        {
            LSLIBWebBased.nsScript.mScript.Alert(this, "Please find IT. " + lblerror.Text, false);
        }
        else
        { 
        
            string lsRedirectURL = "";

            if (HttpContext.Current.Request.Url.ToString().Contains("&PostCode=" + lblFormID.Text) == false)
            {
                lsRedirectURL = HttpContext.Current.Request.Url.ToString() + "&PostCode=" + lblFormID.Text;
            }
            else
            {
                lsRedirectURL = HttpContext.Current.Request.Url.ToString();
            }

            if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                                  , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                                  , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                                  , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                                  , "Create") == true && msMode != "Edit")
            {
                lsRedirectURL = lsRedirectURL + "&Mode=Edit";
            }

            Response.Redirect(lsRedirectURL);
        }
    }

    protected void UpdateForm(string psMode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("FormCode", this.lblFormID.Text);

        ClsLoadFieldHelper.fAddSqlParameter("CompanyCode", this.ddlCompany_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("DivisionCode", this.ddlDivision_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("RequesterCode", this.ddlRequester_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("TelephoneExt", this.txtTelephoneExt_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("ReasonRequest", this.txtReasonRequest_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("LoanStartDate", this.DPLoanStartDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("LoanReturnDate", this.DPLoanReturnDate_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("CopyDataDetail", this.txtCopyDataDetail_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("FirstApprover", this.ddlFirstApprover_edit.Text);
        
        if (psMode != "update" && psMode != "save")
        {
            ClsLoadFieldHelper.fAddSqlParameter("Status", psMode);
        }
        else
        {
            ClsLoadFieldHelper.fAddSqlParameter("Status", this.lblStatus.Text);
        }

        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_USBDriveLoan_update_UserSection");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            lblAlert3.Visible = true;
            lblAlert3.Text = ClsLoadFieldHelper.oLoadSqlField("Result").ToString();            
        }
        else
        {
            lblAlert3.Visible = false;

            if (psMode == "update")
            {

                //LSLIBWebBased.nsScript.mScript.RefreshParentPage(this, false);

                string lsRedirectURL = "";

                lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&Mode=Edit", "");

                Response.Redirect(lsRedirectURL);
            }
            else
            {
                LoadForm();
            }

            //clearEditFields();
        }
    }


    //public void BindDDLUserList(UserControlLibrary.Lamsoon.SmartDropDownList pDropDownList, string psSystemCode, string psType)
    //{        
    //    LIBLocal.BindDDLUserList(pDropDownList, psSystemCode, psType, this.lblLogID.Text, "");

    //    pDropDownList.Items.Insert(0, "");
    //}

    //public static void BindDDLIncidentTypes(UserControlLibrary.Lamsoon.SmartDropDownList pDropDownList, string psSystemCode)
    //{
    //    ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();
    //    //ClsLoadFieldHelper.fAddSqlParameter("@UserCode", this.ClsHashTableHelper.msUserName);
    //    ClsLoadFieldHelper.fAddSqlParameter("@SystemCode", psSystemCode);
    //    ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_DDLIncidentTypes");
    //    ClsLoadFieldHelper.fBindControls(pDropDownList);

    //    pDropDownList.Items.Insert(0, "");
    //}


    protected void btnUpdate_Info_Click(object sender, EventArgs e)
    {
      
        UpdateForm("update");

        //LSLIBWebBased.nsScript.mScript.Alert(this, "Log updated.", false);
                
    }

    protected void btnSendApproval_Click(object sender, EventArgs e)
    {
        string lsRedirectURL = "";

        UpdateForm("Pending");
                
        if (lblAlert3.Visible == false)
        {  
            lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&Mode=Edit", "");

            InsertEmailToList(this.ddlFirstApprover_edit.Text, "Admin@lamsoon.com", "", "", ""
                            , ClsHashTableHelper.sGetHash(ClsHashTableHelper.mClassMyConfiguration.msSystemCode) + " for Approval"
                            , "Link of the form:" + lsRedirectURL);

            ////email part
            //SendEmail(this.ddlApprover_edit.Text, "Meeting Minutes for Approval", 
            //    "Subject: " + this.txtSubject_edit.Text
            //    + "<br><br>Meeting date: " + this.DPMeetingDate_edit.Text + " " + this.txtMeetingTime_edit.Text
            //    + "<br><br> Link of the meeting minutes: " + lsRedirectURL);

            Response.Redirect(lsRedirectURL);
        }
    }

    

    protected void ddlCompanyCode_edit_SelectedIndexChanged(object sender, EventArgs e)
    {
        Bind_ddlDivisionCode(this.ddlCompany_edit.Text, ddlDivision_edit);
    }


    private object Bind_ddlDivisionCode(String msCompanyCode, Object objDivisionCode)
    {

        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("@lang", this.ClsHashTableHelper.msLang);
        ClsLoadFieldHelper.fAddSqlParameter("@CompanyCode", msCompanyCode);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_all_DDLDivisionCode", null, "", false);
        ClsLoadFieldHelper.fBindControls(objDivisionCode);

       if (objDivisionCode == ddlDivision_edit)
        {
            ddlDivision_edit.Items.Insert(0, "");
        }

        return null;
    }

    
    protected void ApproveForm(string psMode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("FormCode", this.lblFormID.Text);

        ClsLoadFieldHelper.fAddSqlParameter("UserCode", "");
        ClsLoadFieldHelper.fAddSqlParameter("Role", "");

        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fAddSqlParameter("@Action", psMode);        

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_Approver_Sign");

    }


    //IT use section

    #region "IT use section"
    protected void btnITSave_Click(object sender, System.EventArgs e)
    {
        UpdateITUse("update");
    }


    protected void UpdateITUse(string psMode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("FormCode", this.lblFormID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Loan", this.txtLoan_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("LoanUserCode", this.ddlLoanToUser_edit);

        ClsLoadFieldHelper.fAddSqlParameter("ITStaffHandleLoan", this.ddlITStaffHandleLoan_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("ActualUSBLoanDate", this.DPActualUSBLoanDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("ITStaffHandleReturn", this.ddlITStaffHandleReturn_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("ActualUSBReturnDate", this.DPActualUSBReturnDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_USBDriveLoan_update_ITUseSection");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            lblAlert4.Visible = true;
            lblAlert4.Text = ClsLoadFieldHelper.oLoadSqlField("Result").ToString();
        }
        else
        {
            lblAlert4.Visible = false;

            if (psMode == "update")
            {
                string lsRedirectURL = "";

                lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&ModeIT=Edit", "");

                Response.Redirect(lsRedirectURL);
            }
            else
            {
                LoadForm();
            }
        }
    }

    #endregion


    //IT Verification section

    #region "IT Verification section"
    protected void btnITVeriSave_Click(object sender, System.EventArgs e)
    {
        UpdateITVerification("update");
    }


    protected void UpdateITVerification(string psMode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("FormCode", this.lblFormID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("ITVeriRemarks", this.txtITVeriRemarks_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("ITVerification", this.txtITVerification_edit);

        ClsLoadFieldHelper.fAddSqlParameter("UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_USBDriveLoan_update_ITVerificationSection");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            lblAlert5.Visible = true;
            lblAlert5.Text = ClsLoadFieldHelper.oLoadSqlField("Result").ToString();
        }
        else
        {
            lblAlert5.Visible = false;

            if (psMode == "update")
            {
                string lsRedirectURL = "";

                lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&ModeV=Edit", "");

                Response.Redirect(lsRedirectURL);
            }
            else
            {
                LoadForm();
            }
        }
    }

    #endregion


    #region "Approver List"
    protected void btnApproverAccept_Click(object sender, EventArgs e)
    {
        ApproveForm("Approved");

        string lsRedirectURL = "";

        lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&Mode=Edit", "");

        Response.Redirect(lsRedirectURL);
    }

    protected void btnApproverDeny_Click(object sender, EventArgs e)
    {
        ApproveForm("Deny");

        string lsRedirectURL = "";

        lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&Mode=Edit", "");

        Response.Redirect(lsRedirectURL);
    }


    private void FillGridApproverList(GridView psGridView)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("FormCode", this.lblFormID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Usercode", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_Form_Approver_Load");
        ClsLoadFieldHelper.fBindControls(psGridView);
    }

    #endregion


    private void InsertEmailToList(string psToUserCode, string psFrom, string psTo, string psCC, string psBCC, string psSubject, string psBody)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();
        ClsLoadFieldHelper.fAddSqlParameter("@mToUserCode", psToUserCode);
        ClsLoadFieldHelper.fAddSqlParameter("@mFrom", psFrom);
        ClsLoadFieldHelper.fAddSqlParameter("@mTo", psTo);
        ClsLoadFieldHelper.fAddSqlParameter("@mCC", psCC);
        ClsLoadFieldHelper.fAddSqlParameter("@mBCC", psBCC);
        ClsLoadFieldHelper.fAddSqlParameter("@mSubject", psSubject);
        ClsLoadFieldHelper.fAddSqlParameter("@mBody", psBody);
        ClsLoadFieldHelper.fAddSqlParameter("@Createby", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_all_Email_CreateNewEmail");
    }

    protected string SendEmail(string psUser, string psHeader, string psBody)
    {
        //psHeader = "Meeting Minutes"
        //psBody = HttpContext.Current.Request.Url.ToString().Replace("&Mode=Edit", "")

        if (bIsExistsEmail(psUser))
        {
            //send UserEmail
            LIBLocal.SendMailnew(psUser, "", "", psHeader, psBody, "", "", strEmailIP, "", "");
        }
        else
        {
            //send AdministratorEmail
            LIBLocal.SendMailnew(this.ClsHashTableHelper.msUserName, "", "", psHeader, psBody, "", "", strEmailIP, "", "");
        }

        return null;
    }

    public bool bIsExistsEmail(String psUserCode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();
        ClsLoadFieldHelper.fAddSqlParameter("@username", psUserCode);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_account_bIsExistsEmail");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            LSLIBWebBased.nsScript.mScript.Alert(this, ClsLoadFieldHelper.oLoadSqlField("Result").ToString(), false);
            return false;
        }
        else
        {
            return true;
        }
    }



 
}



  


    