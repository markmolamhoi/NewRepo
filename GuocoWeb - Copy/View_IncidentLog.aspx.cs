using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using LSLIBWebBased;
using System.Data;

public partial class View_IncidentLog : System.Web.UI.Page
{
    protected ClassHashTableHelper ClsHashTableHelper;
    protected ClassFileUploadHelper ClsFileUploadHelper = new ClassFileUploadHelper();

    private string msMode
    {
        get
        {
            if (LSLIBWebBased.nsSQL.mSQL.oHandleNullAndNothing(this.Request.QueryString["Mode"]) == "")
            {
                return "";
            }
            else
            {
                return this.Request.QueryString["Mode"];
            }
        }
    }

    protected void Page_Init(object sender, EventArgs e)
    {
        //檢查登入權限+取得翻譯表
        LSLIBWebBased.nsClass.mClass.cPageLoadHelper_GuocoWeb(this, ref ClsHashTableHelper, true, "", "", true);
        this.Title = ClsHashTableHelper.sGetHash("View_Log") + " - " + ClsHashTableHelper.sGetHash(ClsHashTableHelper.mClassMyConfiguration.msPostCode);
        this.ucPageHeader1.msTitle = this.Title;

        LSLIBWebBased.nsClass.mClass.cFileUploadHelper(this, ClsFileUploadHelper, FileUpload1);
                
       // CheckMode();
        //LSLIBWebBased.nsClass.mClass.cGridViewAddSortMethod(this.GridView1, FillGridView1, this.lblSortLabel1, null, ClassGridViewHelper.enGridViewTypeCollection.DetailReportWithAutoGeneratedColumnWithNoHeader);

    }

    protected void Page_Load(object sender, EventArgs e)
    {
        // 為頁面添加不能為空的檢查, 如有ValidationGroup, 就添加檢查功能.
        //this.ClsHashTableHelper.fAddValidator(this);

        if (!IsPostBack)
        {
            txtRemark1byIT_edit.Attributes.Add("MaxLength", txtRemark1byIT_edit.MaxLength.ToString());
            txtRemark2byIT_edit.Attributes.Add("MaxLength", txtRemark2byIT_edit.MaxLength.ToString());
            txtRemark3byIT_edit.Attributes.Add("MaxLength", txtRemark3byIT_edit.MaxLength.ToString());
            txtErrorDescription_edit.Attributes.Add("MaxLength", txtErrorDescription_edit.MaxLength.ToString());

            txtErrDescription.Attributes.Add("MaxLength", txtErrDescription.MaxLength.ToString());
            txtFileDesc.Attributes.Add("MaxLength", txtFileDesc.MaxLength.ToString());
            txtRemarkAtt.Attributes.Add("MaxLength", txtRemarkAtt.MaxLength.ToString());
            txtActiontaken.Attributes.Add("MaxLength", txtActiontaken.MaxLength.ToString());

            //LIBLocal2.BindDDLSystemFolder_WithAllChildren(ddlFolderCode_edit, this.ClsHashTableHelper.mClassMyConfiguration.msSystemCode);

            //LSLIBWebBased.nsDataSet.mDataSet.BindListControl("stp_wf_all_DDLParentFolderPath_all", ddlFolderCode_edit, LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

            //LSLIBWebBased.nsDataSet.mDataSet.BindListControl("stp_wf_all_DDLStatus", ddlInfoStatus_edit, LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

            BindDDLUserList(ddlIncidentDiscoveredby_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);
            BindDDLUserList(ddlIncidentReportby_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);
            BindDDLUserList(ddlProjectManager_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);
            BindDDLUserList(ddlRelatedStaff_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);
            BindDDLUserList(ddlAssignedto_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);
            BindDDLUserList(ddlRetestby_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode, this.ddlIncidentType_edit.Text);

            BindDDLIncidentTypes(ddlIncidentType_edit, ClsHashTableHelper.mClassMyConfiguration.msSystemCode);

            LSLIBWebBased.nsCommon.mCommon.BindDDLMaster(this.ddlCriticalLevel_edit, "3", LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);
            LSLIBWebBased.nsCommon.mCommon.BindDDLMaster(this.ddlStatus_edit, "4", LSLIBWebBased.LIBWebBased.enDropDownListType.Blank);

            LIBLocal2.BindDDLSystemFolder_WithAllChildren(ddlFolderCode_edit, this.ClsHashTableHelper.mClassMyConfiguration.msSystemCode);

            LoadLog();

           // LSLIBWebBased.nsScript.mScript.RefreshParentPage(this, false);
            
        }
    }

    protected void CheckMode()
    {
        btnUpdate_Info.Visible = false;
        btnEdit_Info.Visible = false;

        if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                              , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                              , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                              , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                              , "Create") == true)
        {
            if (msMode == "Edit")
            {
                btnUpdate_Info.Visible = true;

                LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPost.Controls, LIBLocal.fSetCoontrolEditMode);
                
                //btnAttachmentAdd.Visible = true;
                //txtFileDesc.Enabled = true;
                //FileUpload1.Enabled = true;
                                
                div_EditProjectManager.Visible = true;
                div_EditRelatedStaff.Visible = true;
                div_ErrorAtt.Visible = true;
                div_Actiontaken.Visible = true;
            }
            else
            {
                btnEdit_Info.Visible = true;

                LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPost.Controls, LIBLocal.fSetCoontrolViewMode);
               // btnAttachmentAdd.Visible = false;
                LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(grdAttachment);
                div_ErrorAtt.Visible = false;
                //txtFileDesc.Enabled = false;
                //FileUpload1.Enabled = false;
                               
                LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(GridViewPM);
                div_EditProjectManager.Visible = false;

                LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(GridViewRS);
                div_EditRelatedStaff.Visible = false;
                                
                LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(grdActiontaken);
                div_Actiontaken.Visible = false;
            }
        }
        else
        {
            LSLIBWebBased.nsWebControl.mWebControl.SearchWebControl(this.divPost.Controls, LIBLocal.fSetCoontrolViewMode);
            // btnAttachmentAdd.Visible = false;
            LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(grdAttachment);
            div_ErrorAtt.Visible = false;
            //txtFileDesc.Enabled = false;
            //FileUpload1.Enabled = false;

            LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(GridViewPM);
            div_EditProjectManager.Visible = false;

            LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(GridViewRS);
            div_EditRelatedStaff.Visible = false;

            LSLIBWebBased.nsCommon.mCommon.fGridViewInvisibleDeleteButton(grdActiontaken);
            div_Actiontaken.Visible = false;
        }
    }

    protected void btnEdit_Info_Click(object sender, EventArgs e)
    {
        string lsRedirectURL = "";

        if (lsRedirectURL.Contains("&Mode=Edit") == false)
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString() + "&Mode=Edit";
        }
        else
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString();
        }

        Response.Redirect(lsRedirectURL);
    }


    protected void LoadLog()
    {

        if (ClsHashTableHelper.mClassMyConfiguration.msPostCode != "")
        {
            ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();
            this.lblLogID.Text = ClsHashTableHelper.mClassMyConfiguration.msPostCode;

            ClsLoadFieldHelper.fAddSqlParameter("LogCode", ClsHashTableHelper.mClassMyConfiguration.msPostCode);
            ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_LoadLog");
                        
            if (ClsLoadFieldHelper.mbDataSetHasRecord)
            {
                ClsLoadFieldHelper.LoadSqlField("System", ref lblSystem);
                ClsLoadFieldHelper.LoadSqlField("LogNo", ref lblLogNo);
                ClsLoadFieldHelper.LoadSqlField("ReportDateTime", ref lblReportDate);  

                ClsLoadFieldHelper.LoadSqlField("Subject", ref lblSubject_view);
                ClsLoadFieldHelper.LoadSqlField("CriticalLevel", ref lblCriticalLevel_view);
                ClsLoadFieldHelper.LoadSqlField("IncidentType", ref lblIncidentType_view);
                ClsLoadFieldHelper.LoadSqlField("IncidentDiscoveredBy", ref lblIncidentDiscoveredby_view);

                ClsLoadFieldHelper.LoadSqlField("Status", ref lblStatus_view);
                ClsLoadFieldHelper.LoadSqlField("CrossRef", ref lblCrossRef_view);
                ClsLoadFieldHelper.LoadSqlField("VersionNo", ref lblVersionNo_view);
                ClsLoadFieldHelper.LoadSqlField("IncidentReportBy", ref lblIncidentReportby_view);

                ClsLoadFieldHelper.LoadSqlField("StartDateTime", ref lblDPStartDate_view);
                ClsLoadFieldHelper.LoadSqlField("EndDateTime", ref lblDPEndDate_view);
                ClsLoadFieldHelper.LoadSqlField("StartTime", ref lblStartTime_view);
                ClsLoadFieldHelper.LoadSqlField("EndTime", ref lblEndTime_view);
                

                ClsLoadFieldHelper.LoadSqlField("Division", ref lblDivision_view);
                ClsLoadFieldHelper.LoadSqlField("RelatedSystems", ref lblRelatedSystems_view);
                ClsLoadFieldHelper.LoadSqlField("SystemServerName", ref lblSystemServerName_view);
                ClsLoadFieldHelper.LoadSqlField("FunctionName", ref lblFunction_view);
                ClsLoadFieldHelper.LoadSqlField("RelatedInternalParties", ref lblRelatedInternalParties_view);
                ClsLoadFieldHelper.LoadSqlField("RelatedExternalParties", ref lblRelatedExternalParties_view);

                ClsLoadFieldHelper.LoadSqlField("ErrorDescription", ref lblErrorDescription_view);
                ClsLoadFieldHelper.LoadSqlField("RetestBy", ref lblRetestby_view);
                ClsLoadFieldHelper.LoadSqlField("AssignedTo", ref lblAssignedto_view);
                ClsLoadFieldHelper.LoadSqlField("RetestDateTime", ref lblRetestDate_view);
                ClsLoadFieldHelper.LoadSqlField("TargetCompletionDateTime", ref lblTargetCompletionDate_view);
                ClsLoadFieldHelper.LoadSqlField("TargetVersion", ref lblTargetVersion_view);
                ClsLoadFieldHelper.LoadSqlField("Remark1byIT", ref lblRemark1byIT_view);
                ClsLoadFieldHelper.LoadSqlField("Remark2byIT", ref lblRemark2byIT_view);
                ClsLoadFieldHelper.LoadSqlField("Remark3byIT", ref lblRemark3byIT_view);

                ClsLoadFieldHelper.LoadSqlField("Folder", ref lblFolderCode_view);               

                LIBLocal2.BindDDLSystemFolder_WithAllChildren(ddlFolderCode_edit, this.ClsHashTableHelper.mClassMyConfiguration.msSystemCode);
                ClsLoadFieldHelper.LoadSqlField("FolderCode", ref ddlFolderCode_edit);

                //ddlFolderCode_edit.Text = lblFolderCode_view.Text;
                txtSubject_edit.Text =lblSubject_view.Text;
                ddlCriticalLevel_edit.Text =lblCriticalLevel_view.Text;
                ddlIncidentType_edit.Text =lblIncidentType_view.Text;
                ddlIncidentDiscoveredby_edit.Text =lblIncidentDiscoveredby_view.Text;
                ddlStatus_edit.Text =lblStatus_view.Text;
                txtCrossRef_edit.Text =lblCrossRef_view.Text;
                txtVersionNo_edit.Text =lblVersionNo_view.Text;
                ddlIncidentReportby_edit.Text =lblIncidentReportby_view.Text;

                txtEndTime_edit.Text = lblEndTime_view.Text;
                txtStartTime_edit.Text = lblStartTime_view.Text;
                DPStartDate_edit.Text = lblDPStartDate_view.Text;
                DPEndDate_edit.Text =lblDPEndDate_view.Text;
                txtDivision_edit.Text =lblDivision_view.Text;
                txtRelatedSystems_edit.Text = lblRelatedSystems_view.Text;
                txtSystemServerName_edit.Text = lblSystemServerName_view.Text;
                txtFunction_edit.Text = lblFunction_view.Text;
                txtRelatedInternalParties_edit.Text = lblRelatedInternalParties_view.Text;
                txtRelatedExternalParties_edit.Text = lblRelatedExternalParties_view.Text;

                txtErrorDescription_edit.Text = lblErrorDescription_view.Text;
                ddlRetestby_edit.Text = lblRetestby_view.Text;
                ddlAssignedto_edit.Text = lblAssignedto_view.Text;
                DPRetestDate_edit.Text = lblRetestDate_view.Text;
                DPTargetCompletionDate_edit.Text = lblTargetCompletionDate_view.Text;
                txtTargetVersion_edit.Text = lblTargetVersion_view.Text;
                txtRemark1byIT_edit.Text = lblRemark1byIT_view.Text;
                txtRemark2byIT_edit.Text = lblRemark2byIT_view.Text;
                txtRemark3byIT_edit.Text = lblRemark3byIT_view.Text;

            }

            FillGridUserList("ProjectManager", GridViewPM);
            FillGridUserList("RelatedStaff", GridViewRS);
            FillGridAttachment(ClsHashTableHelper.mClassMyConfiguration.msPostCode);
            FillGridActiontaken(ClsHashTableHelper.mClassMyConfiguration.msPostCode);
        }
        else
        {
            if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                              , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                              , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                              , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                              , "Create") == true)
            {
                CreateLog();
            }
        }

        CheckMode();       

    }


    protected void CreateLog()
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("SystemCode", ClsHashTableHelper.mClassMyConfiguration.msSystemCode);
        ClsLoadFieldHelper.fAddSqlParameter("FolderCode", ClsHashTableHelper.mClassMyConfiguration.msFolderCode);
        ClsLoadFieldHelper.fAddSqlParameter("UpdateBy", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_CreateNewLog");

        ClsLoadFieldHelper.LoadSqlField("NewCode", ref lblLogID);
        ClsLoadFieldHelper.LoadSqlField("error", ref lblerror);
        
        string lsRedirectURL = "";

        if (HttpContext.Current.Request.Url.ToString().Contains("&PostCode=" + lblLogID.Text) == false)
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString() + "&PostCode=" + lblLogID.Text;
        }
        else
        {
            lsRedirectURL = HttpContext.Current.Request.Url.ToString();
        }

        if (LIBLocal.bCanHaveRight(this.ClsHashTableHelper.msUserName
                              , ClsHashTableHelper.mClassMyConfiguration.msSystemCode
                              , ClsHashTableHelper.mClassMyConfiguration.msFolderCode
                              , ClsHashTableHelper.mClassMyConfiguration.msPostCode
                              , "Create") == true && msMode != "Edit")
        {
            lsRedirectURL = lsRedirectURL + "&Mode=Edit";
        }

        Response.Redirect(lsRedirectURL);
    }

    protected void UpdatePost(string psMode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("LogCode", this.lblLogID.Text);
        //ClsLoadFieldHelper.fAddSqlParameter("ReportDate", this.lblReportDate.Text);

        ClsLoadFieldHelper.fAddSqlParameter("SystemCode", ClsHashTableHelper.mClassMyConfiguration.msSystemCode);
        ClsLoadFieldHelper.fAddSqlParameter("Subject", this.txtSubject_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("CriticalLevel", this.ddlCriticalLevel_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("IncidentType", this.ddlIncidentType_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("IncidentDiscoveredBy", this.ddlIncidentDiscoveredby_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("Status", this.ddlStatus_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("CrossRef", this.txtCrossRef_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("VersionNo", this.txtVersionNo_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("IncidentReportBy", this.ddlIncidentReportby_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("StartDate", this.DPStartDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("EndDate", this.DPEndDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("StartTime", this.txtStartTime_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("EndTime", this.txtEndTime_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("Division", this.txtDivision_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("RelatedSystems", this.txtRelatedSystems_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("SystemServerName", this.txtSystemServerName_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("FunctionName", this.txtFunction_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("RelatedInternalParties", this.txtRelatedInternalParties_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("RelatedExternalParties", this.txtRelatedExternalParties_edit.Text);


        ClsLoadFieldHelper.fAddSqlParameter("ErrorDescription", this.txtErrorDescription_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Retestby", this.ddlRetestby_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Assignedto", this.ddlAssignedto_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("RetestDate", this.DPRetestDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("TargetCompletionDate", this.DPTargetCompletionDate_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("TargetVersion", this.txtTargetVersion_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("Remark1byIT", this.txtRemark1byIT_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Remark2byIT", this.txtRemark2byIT_edit.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Remark3byIT", this.txtRemark3byIT_edit.Text);

        ClsLoadFieldHelper.fAddSqlParameter("FolderCode", this.ddlFolderCode_edit.Text);


        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_update");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            lblAlert3.Visible = true;
            lblAlert3.Text = ClsLoadFieldHelper.oLoadSqlField("Result").ToString();            
        }
        else
        {            
            if (psMode == "update")
            {

                //LSLIBWebBased.nsScript.mScript.RefreshParentPage(this, false);

                string lsRedirectURL = "";

                lsRedirectURL = HttpContext.Current.Request.Url.ToString().Replace("&Mode=Edit", "");

                Response.Redirect(lsRedirectURL);
            }
            else
            {
                LoadLog();
            }

            //clearEditFields();
        }
    }

    public void BindDDLUserList(UserControlLibrary.Lamsoon.SmartDropDownList pDropDownList, string psSystemCode, string psType)
    {        
        LIBLocal.BindDDLUserList(pDropDownList, psSystemCode, psType, this.lblLogID.Text, "");

        pDropDownList.Items.Insert(0, "");
    }

    public static void BindDDLIncidentTypes(UserControlLibrary.Lamsoon.SmartDropDownList pDropDownList, string psSystemCode)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();
        //ClsLoadFieldHelper.fAddSqlParameter("@UserCode", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fAddSqlParameter("@SystemCode", psSystemCode);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_DDLIncidentTypes");
        ClsLoadFieldHelper.fBindControls(pDropDownList);

        pDropDownList.Items.Insert(0, "");
    }


    protected void btnUpdate_Info_Click(object sender, EventArgs e)
    {
        UpdatePost("update");

        //LSLIBWebBased.nsScript.mScript.Alert(this, "Log updated.", false);

        
    }

    #region "Related Staffs"

    protected void AddRelatedStaffs(string psUserCode, string psRole)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("LogCode", this.lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("UserCode", psUserCode);
        ClsLoadFieldHelper.fAddSqlParameter("Role", psRole);
        ClsLoadFieldHelper.fAddSqlParameter("UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_RelatedStaffs_insert");

    }
    
    private void DeleteRelatedStaffs(string psUserCode, string psRole)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("LogCode", this.lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("UserCode", psUserCode);
        ClsLoadFieldHelper.fAddSqlParameter("Role", psRole);
        ClsLoadFieldHelper.fAddSqlParameter("UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_RelatedStaffs_delete");

    }

    private void FillGridUserList(string psRole, GridView psGridView)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("LogCode", this.lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("Role", psRole);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_GridRelatedStaffs");
        ClsLoadFieldHelper.fBindControls(psGridView);
    }


    //ProjectManager
    protected void btnAddProjectManager_Click(object sender, System.EventArgs e)
    {
        AddRelatedStaffs(ddlProjectManager_edit.Text, "ProjectManager");

        FillGridUserList("ProjectManager", GridViewPM);
    }

    
    protected void grdPM_RowCommand(object sender, System.Web.UI.WebControls.GridViewCommandEventArgs e)
    {
        string lsCommandName = e.CommandName;
        switch (lsCommandName)
        {
            case "Delete1":

                int index1 = Convert.ToInt32(e.CommandArgument);

                Label lLabel_UserCode1 = this.GridViewPM.Rows[index1].FindControl("lblKeyUserCode") as Label;
                string sUserCode1 = lLabel_UserCode1.Text;

                //刪除記錄.
                DeleteRelatedStaffs(sUserCode1, "ProjectManager");
                
                // 更新Gridview
                FillGridUserList("ProjectManager", GridViewPM);

                break;
        }
    }
       

    protected void grdPM_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        //加上刪除提醒, 和把Row值放到CommandArgument.
        LSLIBWebBased.nsCommon.mCommon.fGridViewSetDeleteReminder(e);

    }

    //RelatedStaff
    protected void btnAddRelatedStaff_Click(object sender, System.EventArgs e)
    {
        AddRelatedStaffs(ddlRelatedStaff_edit.Text, "RelatedStaff");

        FillGridUserList("RelatedStaff", GridViewRS);
    }


    protected void grdRS_RowCommand(object sender, System.Web.UI.WebControls.GridViewCommandEventArgs e)
    {
        string lsCommandName = e.CommandName;
        switch (lsCommandName)
        {
            case "Delete1":

                int index1 = Convert.ToInt32(e.CommandArgument);

                Label lLabel_UserCode1 = this.GridViewRS.Rows[index1].FindControl("lblKeyUserCode") as Label;
                string sUserCode1 = lLabel_UserCode1.Text;

                //刪除記錄.
                DeleteRelatedStaffs(sUserCode1, "RelatedStaff");

                // 更新Gridview
                FillGridUserList("RelatedStaff", GridViewRS);

                break;
        }
    }


    protected void grdRS_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        //加上刪除提醒, 和把Row值放到CommandArgument.
        LSLIBWebBased.nsCommon.mCommon.fGridViewSetDeleteReminder(e);

    }

    #endregion

    #region "Attachment"
    protected void btnAttachmentAdd_Click(object sender, System.EventArgs e)
    {
        string lsItemNo = this.lblLogID.Text;

        UpdatePost("save");

        string a;

        a = FileUpload1.FileName;

        if (FileUpload1.FileName == "")
        {
            InsertAttachment("", txtFileDesc.Text, "");
        }
        else
        { 
            //fUpLoadFile = 上載檔案.
            ClsFileUploadHelper.fUpLoadFile(lsItemNo, txtFileDesc, InsertAttachment);
        }

        FillGridAttachment(this.lblLogID.Text);
                
        // 更新Gridview, 顯示本申請的附件.
        //  FillGridAttachment(lsItemNo);

    }

    private void InsertAttachment(string psItemID, string psFileDesc, string psFilePath)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("@logCode", lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@Item", txtItem.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@Error_Desc", txtErrDescription.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@File_Desc", psFileDesc);
        ClsLoadFieldHelper.fAddSqlParameter("@File_Path", psFilePath);
        ClsLoadFieldHelper.fAddSqlParameter("@Remark", txtRemarkAtt.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_Attachment_insert");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            lblAlert5.Visible = true;
            lblAlert5.Text = ClsLoadFieldHelper.oLoadSqlField("Result").ToString();
        }
        else
        {
            txtItem.Text = "";
            FileUpload1.FileName.Equals("");
            txtErrDescription.Text = "";
            txtRemarkAtt.Text = "";
        }
    }

    private void DeleteAttachment(string psItemID, string psSeq_No)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("@LogCode", lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@Seq_No", psSeq_No);
        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_Attachment_delete");

    }

    // contain demo example
    protected void grdAttachment_RowCommand(object sender, System.Web.UI.WebControls.GridViewCommandEventArgs e)
    {
        string lsCommandName = e.CommandName;
        switch (lsCommandName)
        {
            case "Delete1":
                System.Web.UI.WebControls.GridViewRow lGridViewRow = this.grdAttachment.Rows[Int32.Parse(e.CommandArgument.ToString())];
                // todo lesson
                // method 1 - 有control ID時用
                System.Web.UI.WebControls.HyperLink lHyperLink = (System.Web.UI.WebControls.HyperLink)lGridViewRow.FindControl("HyperLink1");
                string lsFilePath = lHyperLink.Text;

                int index1 = Convert.ToInt32(e.CommandArgument);

                Label lLabel_Seq_No = this.grdAttachment.Rows[index1].FindControl("lblSeq_No") as Label;
                string sSeq_No = lLabel_Seq_No.Text;

                // method 2 - 特殊情況時用
                //  Dim lHyperLink As HyperLink = lGridViewRow.Cells(0).Controls(0)

                // method 3 - BoundField 時用
                //Dim lsProductID As String = lGridViewRow.Cells(0).Text

                // Dim lsFilePath As String = lHyperLink.Text

                //刪除數據庫上的檔案記錄.
                DeleteAttachment(this.lblLogID.Text, sSeq_No);

                //刪除伺服器上的檔案.
                ClsFileUploadHelper.fRemoveFile(lsFilePath);

                // 更新Gridview, 顯示本申請的附件.
                FillGridAttachment(this.lblLogID.Text);

                break;
        }
    }

    private void FillGridAttachment(string psItemID)
    {
        //BindGridViewSinglePara = 一個簡化版本的綁定GridView功能. 如果STP只有1個paramater時, 可以用這個功能.
        LSLIBWebBased.nsDataSet.mDataSet.BindGridViewSinglePara("@LogCode", psItemID, "stp_wf_dms_log_IncidentLog_Attachment_Gird", grdAttachment);
    }


    protected void grdAttachment_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        //加上刪除提醒, 和把Row值放到CommandArgument.
        LSLIBWebBased.nsCommon.mCommon.fGridViewSetDeleteReminder(e);
    }
    
    protected string bindGetText(object value)
    {
        if (value == DBNull.Value || value =="")
            return "";
        else
            return "Link";
    }

    #endregion


    #region "Actiontaken"
    protected void btnActiontakenAdd_Click(object sender, System.EventArgs e)
    {
        string lsItemNo = this.lblLogID.Text;

        UpdatePost("save");

        InsertActiontaken();

        FillGridActiontaken(this.lblLogID.Text);

    }

    private void InsertActiontaken()
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("@logCode", lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@ActionItem", txtActionitem.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@ActionTaken", txtActiontaken.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@ActionDate", DPActiontakeDate.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fAddSqlParameter("@ActionTime", txtActiontakeTime.Text);

        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_ActionTaken_insert");

        if (ClsLoadFieldHelper.mbDataSetHasRecord)
        {
            lblAlert4.Visible = true;
            lblAlert4.Text = ClsLoadFieldHelper.oLoadSqlField("Result").ToString();            
        }
        else
        {
            txtActionitem.Text = "";
            txtActiontaken.Text = "";
            DPActiontakeDate.Text = "";
            txtActiontakeTime.Text = "";
        }

    }

    private void DeleteActiontaken(string psItemID, string psSeq_No)
    {
        ClassLoadFieldHelper ClsLoadFieldHelper = new ClassLoadFieldHelper();

        ClsLoadFieldHelper.fAddSqlParameter("@LogCode", lblLogID.Text);
        ClsLoadFieldHelper.fAddSqlParameter("@Seq_No", psSeq_No);
        ClsLoadFieldHelper.fAddSqlParameter("@UpdateBy", this.ClsHashTableHelper.msUserName);
        ClsLoadFieldHelper.fBuildDataSet("stp_wf_dms_log_IncidentLog_Actiontaken_delete");

    }

    // contain demo example
    protected void grdActiontaken_RowCommand(object sender, System.Web.UI.WebControls.GridViewCommandEventArgs e)
    {
        string lsCommandName = e.CommandName;
        switch (lsCommandName)
        {
            case "Delete1":
                System.Web.UI.WebControls.GridViewRow lGridViewRow = this.grdActiontaken.Rows[Int32.Parse(e.CommandArgument.ToString())];
               
                int index1 = Convert.ToInt32(e.CommandArgument);

                Label lLabel_Seq_No = this.grdActiontaken.Rows[index1].FindControl("lblSeq_No") as Label;
                string sSeq_No = lLabel_Seq_No.Text;

                DeleteActiontaken(this.lblLogID.Text, sSeq_No);

                // 更新Gridview, 顯示本申請的附件.
                FillGridActiontaken(this.lblLogID.Text);

                break;
        }
    }

    private void FillGridActiontaken(string psItemID)
    {
        //BindGridViewSinglePara = 一個簡化版本的綁定GridView功能. 如果STP只有1個paramater時, 可以用這個功能.
        LSLIBWebBased.nsDataSet.mDataSet.BindGridViewSinglePara("@LogCode", psItemID, "stp_wf_dms_log_IncidentLog_ActionTaken_Gird", grdActiontaken);
    }


    protected void grdActiontaken_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        //加上刪除提醒, 和把Row值放到CommandArgument.
        LSLIBWebBased.nsCommon.mCommon.fGridViewSetDeleteReminder(e);
    }

    
    #endregion
 
}



  


    